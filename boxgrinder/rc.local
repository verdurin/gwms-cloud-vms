#!/bin/sh

touch /var/lock/subsys/local

# Ensure devpts is mounted to prevent ssh hang-ups
mount | grep devpts > /dev/null 2>&1
if [ $? -ne 0 ] ; then
    devpts="none   /dev/pts   devpts  gid=5,mode=620 0 0"
    ( grep -v "\#" /etc/fstab | grep devpts > /dev/null 2>&1 ) || echo $devpts >> /etc/fstab
    mount -a >/dev/null 2>&1
fi

# Randomise the root password as the last operation
# We ideally have some more entropy at this stage
echo "-----RANDOMISING ROOT PASSWORD-----"
dd if=/dev/urandom count=128 2>/dev/null|md5sum|passwd --stdin root >/dev/null 2>&1

# Regenerate the host keys at this stage
# Having more entropy to work with
echo "-----TRIGGERING HOST KEYS REGENERATION-----"
echo "Removing existing keys"
rm -f /etc/ssh/ssh_host_key.pub \ 
      /etc/ssh/ssh_host_rsa_key.pub
      /etc/ssh/ssh_host_dsa_key.pub \
      /etc/ssh/ssh_host_key \
      /etc/ssh/ssh_host_rsa_key \
      /etc/ssh/ssh_host_dsa_key
echo "Bouncing sshd to force regeneration"
/sbin/service sshd restart
echo "Setting sshd to start as a service"
/sbin/chkconfig --level 2345 sshd on


if [ ! -d /root/.ssh ] ; then
    mkdir -p /root/.ssh
    chmod 0700 /root/.ssh
fi

# We do this manually for root since boxgrinder will only append code to grab
# the key for ec2-user.
ATTEMPTS=5
FAILED=0
# Fetch public key using HTTP
while [ ! -f /root/.ssh/authorized_keys ]; do
    curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /tmp/aws-key 2>/dev/null
    if [ $? -eq 0 ]; then
        cat /tmp/aws-key >> /root/.ssh/authorized_keys
        chmod 0600 /root/.ssh/authorized_keys
        rm -f /tmp/aws-key
        echo "Successfully retrieved AWS public key from instance metadata"
    else
        FAILED=$(($FAILED + 1))
        if [ $FAILED -ge $ATTEMPTS ]; then
            echo "Failed to retrieve AWS public key after $FAILED attempts, quitting"
            break
        fi
        echo "Could not retrieve AWS public key (attempt #$FAILED/$ATTEMPTS), retrying in 5 seconds..."
        sleep 5
    fi
done


# Nimbus needs to have /root/.ssh created so that the create-keypair call will 
# succeed - shouldn't hurt on an Amazon EC2 image
mkdir -p /root/.ssh
chmod 700 /root/.ssh

# update to latest available software
yum update -y --exclude=xrootd*

# Use serverless puppet to configure the AMI
puppet apply /root/cvmfs.pp

# Enable desired services
/sbin/chkconfig --level 2345 sshd on
/sbin/chkconfig fetch-crl-cron on

# Disable automatic yum updates
/sbin/service yum stop
/sbin/chkconfig yum off

# Start desired services
/sbin/service sshd start
/sbin/service fetch-crl-cron start
/sbin/service autofs start
/sbin/service cvmfs start

# Ensure CVMFS running

/usr/bin/logger -s "Checking CVMFS access to CMS area..."

cd /cvmfs/cms.cern.ch
sleep 5
ls /cvmfs/cms.cern.ch/cmsset_default.sh

if 
	[ -e  "/cvmfs/cms.cern.ch/cmsset_default.sh" ]
then
	/usr/bin/logger -s "/cvmfs/cms.cern.ch/cmsset_default.sh exists\n"
	/usr/bin/logger -s "CVMFS check passed"
	exit
else
	/usr/bin/logger -s "CVMFS check failed"
	/sbin/poweroff
fi


